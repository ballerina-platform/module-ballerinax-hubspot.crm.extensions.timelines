// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# This feature allows an app to create and configure custom events that can show up in the timelines of certain CRM objects like contacts, companies, tickets, or deals. You'll find multiple use cases for this API in the sections below.
public isolated client class Client {
    final http:Client clientEp;
    final readonly & ApiKeysConfig? apiKeyConfig;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://api.hubapi.com/integrators/timeline/v3") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        if config.auth is ApiKeysConfig {
            self.apiKeyConfig = (<ApiKeysConfig>config.auth).cloneReadOnly();
        } else {
            httpClientConfig.auth = <http:BearerTokenConfig|OAuth2RefreshTokenGrantConfig>config.auth;
            self.apiKeyConfig = ();
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Deletes an event template for the app
    #
    # + eventTemplateId - The event template ID.
    # + appId - The ID of the target app.
    # + headers - Headers to be sent with the request 
    # + return - No content 
    resource isolated function delete [int:Signed32 appId]/event\-templates/[string eventTemplateId](map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/${getEncodedUri(appId)}/event-templates/${getEncodedUri(eventTemplateId)}`;
        map<anydata> queryParam = {};
        if self.apiKeyConfig is ApiKeysConfig {
            queryParam["hapikey"] = self.apiKeyConfig?.hapikey;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Removes a token from the event template
    #
    # + eventTemplateId - The event template ID.
    # + tokenName - The token name.
    # + appId - The ID of the target app.
    # + headers - Headers to be sent with the request 
    # + return - No content 
    resource isolated function delete [int:Signed32 appId]/event\-templates/[string eventTemplateId]/tokens/[string tokenName](map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/${getEncodedUri(appId)}/event-templates/${getEncodedUri(eventTemplateId)}/tokens/${getEncodedUri(tokenName)}`;
        map<anydata> queryParam = {};
        if self.apiKeyConfig is ApiKeysConfig {
            queryParam["hapikey"] = self.apiKeyConfig?.hapikey;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # List all event templates for your app
    # 
    # + appId - The ID of the target app.
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function get [int:Signed32 appId]/event\-templates(map<string|string[]> headers = {}) returns CollectionResponseTimelineEventTemplateNoPaging|error {
        string resourcePath = string `/${getEncodedUri(appId)}/event-templates`;
        map<anydata> queryParam = {};
        if self.apiKeyConfig is ApiKeysConfig {
            queryParam["hapikey"] = self.apiKeyConfig?.hapikey;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Gets a specific event template for your app
    #
    # + eventTemplateId - The event template ID.
    # + appId - The ID of the target app.
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function get [int:Signed32 appId]/event\-templates/[string eventTemplateId](map<string|string[]> headers = {}) returns TimelineEventTemplate|error {
        string resourcePath = string `/${getEncodedUri(appId)}/event-templates/${getEncodedUri(eventTemplateId)}`;
        map<anydata> queryParam = {};
        if self.apiKeyConfig is ApiKeysConfig {
            queryParam["hapikey"] = self.apiKeyConfig?.hapikey;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        return self.clientEp->get(resourcePath, headers);
    }

    # Gets the event
    #
    # + eventTemplateId - The event template ID.
    # + eventId - The event ID.
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function get events/[string eventTemplateId]/[string eventId](map<string|string[]> headers = {}) returns TimelineEventResponse|error {
        string resourcePath = string `/events/${getEncodedUri(eventTemplateId)}/${getEncodedUri(eventId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app"] = self.apiKeyConfig?.private\-app;
            headerValues["private-app-legacy"] = self.apiKeyConfig?.private\-app\-legacy;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Gets the detailTemplate as rendered
    #
    # + eventTemplateId - The event template ID.
    # + eventId - The event ID.
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function get events/[string eventTemplateId]/[string eventId]/detail(map<string|string[]> headers = {}) returns EventDetail|error {
        string resourcePath = string `/events/${getEncodedUri(eventTemplateId)}/${getEncodedUri(eventId)}/detail`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app"] = self.apiKeyConfig?.private\-app;
            headerValues["private-app-legacy"] = self.apiKeyConfig?.private\-app\-legacy;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Renders the header or detail as HTML
    #
    # + eventTemplateId - The event template ID.
    # + eventId - The event ID.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - successful operation 
    resource isolated function get events/[string eventTemplateId]/[string eventId]/render(map<string|string[]> headers = {}, *GetEventsEventTemplateIdEventIdRenderGetRenderByIdQueries queries) returns string|error {
        string resourcePath = string `/events/${getEncodedUri(eventTemplateId)}/${getEncodedUri(eventId)}/render`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app"] = self.apiKeyConfig?.private\-app;
            headerValues["private-app-legacy"] = self.apiKeyConfig?.private\-app\-legacy;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Create an event template for your app
    #
    # + appId - The ID of the target app.
    # + headers - Headers to be sent with the request 
    # + payload - The updated event template definition. 
    # + return - successful operation 
    resource isolated function post [int:Signed32 appId]/event\-templates(TimelineEventTemplateCreateRequest payload, map<string|string[]> headers = {}) returns TimelineEventTemplate|error {
        string resourcePath = string `/${getEncodedUri(appId)}/event-templates`;
        map<anydata> queryParam = {};
        if self.apiKeyConfig is ApiKeysConfig {
            queryParam["hapikey"] = self.apiKeyConfig?.hapikey;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Adds a token to an existing event template
    #
    # + eventTemplateId - The event template ID.
    # + appId - The ID of the target app.
    # + headers - Headers to be sent with the request 
    # + payload - The new token definition. 
    # + return - successful operation 
    resource isolated function post [int:Signed32 appId]/event\-templates/[string eventTemplateId]/tokens(TimelineEventTemplateToken payload, map<string|string[]> headers = {}) returns TimelineEventTemplateToken|error {
        string resourcePath = string `/${getEncodedUri(appId)}/event-templates/${getEncodedUri(eventTemplateId)}/tokens`;
        map<anydata> queryParam = {};
        if self.apiKeyConfig is ApiKeysConfig {
            queryParam["hapikey"] = self.apiKeyConfig?.hapikey;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a single event
    #
    # + headers - Headers to be sent with the request 
    # + payload - The timeline event definition. 
    # + return - successful operation 
    resource isolated function post events(TimelineEvent payload, map<string|string[]> headers = {}) returns TimelineEventResponse|error {
        string resourcePath = string `/events`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app-legacy"] = self.apiKeyConfig?.private\-app\-legacy;
            headerValues["private-app"] = self.apiKeyConfig?.private\-app;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Creates multiple events
    #
    # + headers - Headers to be sent with the request 
    # + payload - The timeline event definition. 
    # + return - successful operation 
    resource isolated function post events/batch/create(BatchInputTimelineEvent payload, map<string|string[]> headers = {}) returns BatchResponseTimelineEventResponse|BatchResponseTimelineEventResponseWithErrors|json|error {
        string resourcePath = string `/events/batch/create`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app-legacy"] = self.apiKeyConfig?.private\-app\-legacy;
            headerValues["private-app"] = self.apiKeyConfig?.private\-app;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Update an existing event template
    #
    # + eventTemplateId - The event template ID.
    # + appId - The ID of the target app.
    # + headers - Headers to be sent with the request 
    # + payload - The updated event template definition. 
    # + return - successful operation 
    resource isolated function put [int:Signed32 appId]/event\-templates/[string eventTemplateId](TimelineEventTemplateUpdateRequest payload, map<string|string[]> headers = {}) returns TimelineEventTemplate|error {
        string resourcePath = string `/${getEncodedUri(appId)}/event-templates/${getEncodedUri(eventTemplateId)}`;
        map<anydata> queryParam = {};
        if self.apiKeyConfig is ApiKeysConfig {
            queryParam["hapikey"] = self.apiKeyConfig?.hapikey;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Updates an existing token on an event template
    #
    # + eventTemplateId - The event template ID.
    # + tokenName - The token name.
    # + appId - The ID of the target app.
    # + headers - Headers to be sent with the request 
    # + payload - The updated token definition. 
    # + return - successful operation 
    resource isolated function put [int:Signed32 appId]/event\-templates/[string eventTemplateId]/tokens/[string tokenName](TimelineEventTemplateTokenUpdateRequest payload, map<string|string[]> headers = {}) returns TimelineEventTemplateToken|error {
        string resourcePath = string `/${getEncodedUri(appId)}/event-templates/${getEncodedUri(eventTemplateId)}/tokens/${getEncodedUri(tokenName)}`;
        map<anydata> queryParam = {};
        if self.apiKeyConfig is ApiKeysConfig {
            queryParam["hapikey"] = self.apiKeyConfig?.hapikey;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }
}
